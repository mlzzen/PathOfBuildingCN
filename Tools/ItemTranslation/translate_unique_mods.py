import math
import requests
import re
import json

urlCN = "https://poedb.tw/cn/"
urlEN = "https://poedb.tw/us/"

def LoadUniques():
    uniques = []
    with open("./Tools/ItemTranslation/uniques.txt", "r") as f:
        uniques = f.read()
        uniques = uniques.split("\n")
    return uniques

def FetchMods(unique : str, url):
    uniqueUrlName = unique.replace("'", "").replace(" ", "_").replace(",", "%2C")
    url += uniqueUrlName
    content = requests.get(url).content.decode("utf-8")
    mods = re.findall('<meta property="og:description" content="(.*?)" />', content, re.DOTALL)
    modLines = mods[0].split("\n")
    for i in range(len(modLines)):
        modLines[i] = re.sub("%", "%%", modLines[i])
        modLines[i] = re.sub("[+]", "%+", modLines[i])
        modLines[i] = re.sub("[-]", "%-", modLines[i])
        modLines[i] = re.sub("[(].*[)]", "(%d+)", modLines[i])
        modLines[i] = re.sub("[0-9]+", "(%d+)", modLines[i])
    if unique == "Headhunter" and len(modLines) == 6:
        modLines = modLines[:-1]
    if unique == "Skin of the Loyal" or unique == "Circle of Anguish" \
        or unique == "Circle of Fear" or unique == "Circle of Guilt" \
        or unique == "Circle of Nostalgia" or unique == "Circle of Regret":
        modLines = modLines[0:4]
    if unique == "Tabula Rasa" or unique == "Militant Faith":
        modLines = modLines[0:2]
    if unique == "Cinderswallow Urn":
        modLines = modLines[0:5]
    if unique == "Split Personality" or unique == "Triumvirate Authority":
        modLines = modLines[0:1]
    if unique == "Watcher's Eye":
        modLines = modLines[0:3]
    return modLines

def DumpLua(map):
    out_str = "-- This file is automatically generated, do not edit!\n"
    out_str += "return {\n"
    for key, val in map.items():
        out_str += '\t["{}"] = "{}",\n'.format(key, val)
    out_str += "}"
    with open("./Tools/ItemTranslation/unique_mods.lua", "w") as f:
        f.write(out_str)

def DumpJson(map):
    with open("./Tools/ItemTranslation/results.json", "w", encoding="utf-8") as f:
        json.dump(map, f, indent=4, separators=(',', ': '), ensure_ascii=False)

def LoadJson():
    with open("./Tools/ItemTranslation/results.json", "r", encoding="utf-8") as f:
        result = json.load(f)
        return result

def Run():
    uniques = LoadUniques()
    result = LoadJson()
    count = 0
    for unique in uniques:
        # 手动添加：变形者外衣 沉默之雷
        if unique.endswith(" Guise") or unique.endswith("lner") \
            or unique in result["uniques"]:
            continue
        modLinesCN = FetchMods(unique, urlCN)
        modLinesEN = FetchMods(unique, urlEN)
        for i in range(len(modLinesCN)):
            result["mods"][modLinesEN[i]] = modLinesCN[i]
        result["uniques"].append(unique)
        count += 1
        DumpJson(result)
    DumpLua(result["mods"])

Run()